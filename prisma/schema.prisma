// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  admin
  user
}

enum OrderStatus {
  DRAFT // Order created, but not yet placed (e.g., during checkout)
  PENDING // Order placed, awaiting payment confirmation
  CONFIRMED // Payment confirmed, ready for fulfillment
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// AUTH MODELS (NextAuth - mostly unchanged)
model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  role      Role      @default(user)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
  cart      Cart?
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// E-COMMERCE MODELS
model Product {
  id          String         @id @default(cuid())
  name        String
  description String         @db.Text
  handle      String         @unique
  imageUrl    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  variants    ProductVariant[]
}

model ProductVariant {
  id         String     @id @default(cuid())
  productId  String
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku        String?    @unique
  price      Int // Store price in cents
  stock      Int        @default(0)
  attributes Json? // e.g., {"size": "M", "color": "Blue"}
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean @default(false)
}

// CART (unchanged)
model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestId   String?    @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String         @id @default(cuid())
  cartId    String
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([cartId, variantId])
}

// ORDER & PAYMENT (Significantly updated)
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Human-friendly order number
  userId          String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestId         String? // For linking guest orders together
  customerEmail   String
  status          OrderStatus @default(DRAFT)
  paymentStatus   PaymentStatus @default(PENDING)
  total           Int // Store total in cents
  shippingAddress Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  accessToken     String      @unique @default(cuid()) // For secure guest access
  items           OrderItem[]
  payments        Payment[]
}

model OrderItem {
  id        String         @id @default(cuid())
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)
  quantity  Int
  price     Int // Price at time of purchase
  name      String // Name at time of purchase
}

// New model to track individual payment attempts
model Payment {
  id           String        @id @default(cuid())
  orderId      String
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider     String // e.g., "paymob"
  providerRef  String?       @unique // The transaction ID from Paymob
  amount       Int
  status       PaymentStatus
  errorCode    String?
  errorMessage String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// New model for guest account upgrade invitations
model GuestUpgradeInvite {
  id        String   @id @default(cuid())
  orderId   String   @unique // Link to the specific order that prompted the invite
  email     String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
}