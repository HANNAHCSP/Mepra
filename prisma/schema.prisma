// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS for status tracking
enum Role {
  admin
  user
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

// AUTHENTICATION MODELS (NextAuth)
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  role      Role     @default(user)
  password  String // bcrypt hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // E-commerce relations
  addresses Address[]
  orders    Order[]
  cart      Cart?
  // NextAuth relations
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime // Corrected from expiresAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// E-COMMERCE MODELS
model Product {
  id          String @id @default(cuid())
  name        String
  description String @db.Text
  handle      String @unique
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants ProductVariant[]
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku       String? @unique
  price     Int // Store price in cents
  stock     Int     @default(0)
  attributes Json? // e.g., {"size": "M", "color": "Blue"}

  cartItems CartItem[]
  orderItems OrderItem[]
}


model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean @default(false)
}

// Shopping Cart (temporary state)
model Cart {
  id        String     @id @default(cuid())
  userId    String?     @unique
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestId   String?    @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([cartId, variantId]) // A product can only appear once per cart
}


// Order (permanent record of a purchase)
model Order {
  id               String      @id @default(cuid())
  userId           String? // Optional for guest checkouts
  user             User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  status           OrderStatus @default(PENDING)
  total            Int // Store total in cents
  shippingAddress  Json // Store a snapshot of the address
  customerEmail    String // Required for guest and user checkouts
  createdAt        DateTime    @default(now())
  
  items            OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)
  
  quantity  Int
  price     Int // Store price at time of purchase, in cents
  name      String // Store product name at time of purchase
}